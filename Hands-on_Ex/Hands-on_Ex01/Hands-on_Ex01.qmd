---
title: "Hands-on Exercise 1"
author: "Michelle Zhang"
---

# 1.Getting Started

## 1.1 Install and launching R packages

The code chunk below use p_load() of pacman package to check if tidyverse package are installed in the computer

```{r}
pacman::p_load(tidyverse)
```

## 1.2 Importing the data

```{r}
exam_data <- read_csv("Data/Exam_data.csv")
```

# 2.Play with ggplot1(chart)

2.1 Bar Chart

```{r}
ggplot(data=exam_data,
       aes(x=RACE))+
      geom_bar()
```

2.2 Dot plot

```{r}
ggplot(data=exam_data,
       aes(x=MATHS))+
      geom_dotplot(dotsize = 0.5)
```

term

:   he y scale is not very useful, in fact it is very misleading.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```

2.3 Histogram

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram() 
```

2.4 geom-density()

continuous version fo hist

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density() 
```

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

2.5 **geom_boxplot**

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()            
```

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

2.6 **geom_point()**

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()     
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

### **3. Modifying a geometric object**

3.1geom()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  
```

3.2aes()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

3.3 combine

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)        
```

4.  stat

    -   There are two ways to use these functions:

        -   add a `stat_()` function and override the default geom, or

        -   add a `geom_()` function and override the default stat.

    -   frequency of values of a variable (bar graph)

        -   a mean

        -   a confidence limit

    4.1 ***stat_summary()***

    ```{r}
    ggplot(data=exam_data, 
           aes(y = MATHS, x= GENDER)) +
      geom_boxplot() +
      stat_summary(geom = "point",       
                   fun="mean",         
                   colour ="red",        
                   size=4)               
    ```

4.2 geom()

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun="mean",           
             colour ="red",          
             size=4)          
```

5.**Facets**

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

6.**Coordinates**

or

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

coord_flip()

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() 
```

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

7.  themes

    Themes control elements of the graph not related to the data. For example:

    -   background colour

    -   size of fonts

    -   gridlines

    -   colour of labels

    Built-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()

```

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
